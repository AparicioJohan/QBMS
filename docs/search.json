[{"path":"/articles/bms_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"BMS Example","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System(s) like BMS, BreedBase, GIGWA (using BrAPI calls) help retrieve phenotypic genotypic data directly analyzing pipelines developed R statistical environment.","code":""},{"path":"/articles/bms_example.html","id":"breeding-management-system","dir":"Articles","previous_headings":"QBMS","what":"Breeding Management System","title":"BMS Example","text":"Breeding Management System (BMS) information management system developed Integrated Breeding Platform help breeders manage breeding process, programme planning decision-making. BMS customizable crop breeding programs, comes pre-loaded curated ontology terms many crops (bean, cassava, chickpea, cowpea, groundnut, maize, rice, sorghum, soybean, wheat, others). BMS available cloud application, can installed local remote servers accessed multiple users.","code":""},{"path":"/articles/bms_example.html","id":"brapi","dir":"Articles","previous_headings":"QBMS","what":"BrAPI","title":"BMS Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/bms_example.html","id":"install","dir":"Articles","previous_headings":"QBMS","what":"Install","title":"BMS Example","text":"already active BMS user, can contact IBP support get access trial BMS server.","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/articles/bms_example.html","id":"example","dir":"Articles","previous_headings":"QBMS","what":"Example","title":"BMS Example","text":"","code":"# load the QBMS library library(QBMS)  # config your BMS connection (by providing your BMS login page URL) set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\")  # login using your BMS account (interactive mode) # or pass your BMS username and password as parameters (batch mode) login_bms()  # list supported crops in the current bms server list_crops()  # select a crop by name set_crop(\"maize\")  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"MC Maize\")  # list all studies/trials in the selected program list_trials()  # filtered by year of starting date list_trials(2020)  # select a specific study/trial by name set_trial(\"2018 PVT\")  # get observation variable ontology in the selected study/trial ontology <- get_trial_obs_ontology()  # list all environments/locations information in the selected study/trial list_studies()  # select a specific environment/location by name set_study(\"2018 PVT Environment Number 1\")  # select a specific study by location name (first match) studies <- list_studies() set_study(studies[studies$locationName == \"BASF Bremen\", \"studyName\"][1])  # retrieve data, general information, and germplasm list  # of the selected environment/location data <- get_study_data() info <- get_study_info() germplasm <- get_germplasm_list()  # get the pedigree table pedigree_table <- get_pedigree_table(germplasm, \"germplasmName\", \"pedigree\")  # retrieve multi-environment trial data of the selected study/trial MET <- get_trial_data()  # retrieve all environments/locations information in the selected program program_studies <- get_program_studies()  # retrieve observations data of given germplasm aggregated from all trials  # in the selected program germplasm_observations <- get_germplasm_data(\"BASFCORN-2-1\")  # retrieve germplasm attributes for a given germplasm in a crop germplasm_attributes <- get_germplasm_attributes(\"BASFCORN-2-1\")"},{"path":"/articles/breedbase_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"BreedBase Example","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System(s) like BMS, BreedBase, GIGWA (using BrAPI calls) help retrieve phenotypic genotypic data directly analyzing pipelines developed R statistical environment. Well, Breedbase supports BrAPI standard, QBMS functionalities work smoothly minor changes. example, need give special attention set_qbms_config parameters (check example ). Currently, functions supported working BreedBase, like get_program_studies, get_germplasm_data, list_trials filtered year!","code":""},{"path":"/articles/breedbase_example.html","id":"breedbase","dir":"Articles","previous_headings":"","what":"BreedBase","title":"BreedBase Example","text":"Breedbase comprehensive breeding management analysis software. can used design field layouts, collect phenotypic information using tablets, support collection genotyping samples field, store large amounts high density genotypic information, provide Genomic Selection related analyses predictions.","code":""},{"path":"/articles/breedbase_example.html","id":"brapi","dir":"Articles","previous_headings":"","what":"BrAPI","title":"BreedBase Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/breedbase_example.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"BreedBase Example","text":"can find set Breedbase based servers available several crops accessible authentication required listed BrAPI website following page group Boyce Thompson Institute (BTI), discovery innovation life sciences: https://brapi.org/servers.","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/articles/breedbase_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"BreedBase Example","text":"","code":"# load the QBMS library library(QBMS)  # Cassava BreedBase server set_qbms_config(\"https://cassavabase.org/brapi/v1/calls/\",                  time_out = 300, no_auth = TRUE, engine = \"breedbase\")  # list supported crops in the current BreedBase server list_crops()  # select a crop by name set_crop(\"Cassava\")  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"IITA\")  # list all studies/trials in the selected program list_trials()  # select a specific study/trial by name set_trial(\"20_Abuja\")  # get observation variable ontology in the selected study/trial get_trial_obs_ontology()  # list all environments/locations information in the selected study/trial list_studies()  # select a specific environment/location by name set_study(\"20NCRP12yrtAB\")  # another option, select a specific study by location name (first match) # studies <- list_studies() # set_study(studies[studies$locationName == \"Abuja\", \"studyName\"][1])  # retrieve general information, data, and germplasm list  # of the selected environment/location info <- get_study_info() data <- get_study_data() germplasm <- get_germplasm_list()  # retrieve multi-environment trial data of the selected study/trial MET <- get_trial_data()"},{"path":"/articles/gigwa_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"GIGWA Example","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System(s) like BMS, BreedBase, GIGWA (using BrAPI calls) help retrieve phenotypic genotypic data directly analyzing pipelines developed R statistical environment.","code":""},{"path":"/articles/gigwa_example.html","id":"gigwa","dir":"Articles","previous_headings":"","what":"GIGWA","title":"GIGWA Example","text":"GIGWA web-based tool provides easy intuitive way explore large amounts genotyping data filtering latter based variant features, including functional annotations, also genotype patterns. data storage relies MongoDB, offers good scalability perspectives. GIGWA can handle multiple databases may deployed either single multi-user mode. Finally, provides wide range popular export formats.","code":""},{"path":"/articles/gigwa_example.html","id":"brapi","dir":"Articles","previous_headings":"","what":"BrAPI","title":"GIGWA Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/gigwa_example.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"GIGWA Example","text":"","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/articles/gigwa_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"GIGWA Example","text":"","code":"# load the QBMS library library(QBMS)  # The public GIGWA testing server required no authentication. If your GIGWA server  # requires authentication, then make sure that no_auth parameter value is FALSE # IMPORTENT NOTE: QBMS required GIGWA version 2.4.1 or higher set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # If login is required, then you can use your GIGWA account (interactive mode) # or pass your GIGWA username and password as parameters (batch mode) # login_gigwa() # login_gigwa(\"gigwadmin\", \"nimda\")  # list existing databases in the current GIGWA server gigwa_list_dbs()  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # list all projects in the selected database gigwa_list_projects()  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # list all runs in the selected project gigwa_list_runs()  # select a specific run by name gigwa_set_run(\"run1\")  # get a list of all samples in the selected run samples <- gigwa_get_samples()  # show the first 6 individuals on the list of samples head(samples)  # query the variants (e.g., SNPs markers) in the selected run  # that match the given criteria: # - max_missing: maximum missing ratio (by sample) [0-1] (default is 1 for 100%)  # - min_maf: minimum Minor Allele Frequency (MAF) [0-1] (default is 0 for 0%)  # - samples: a list of a samples subset (default is NULL will retrieve for all samples)  marker_matrix <- gigwa_get_variants(max_missing = 0.2,                                      min_maf = 0.35,                                      samples = c(\"ind1\", \"ind3\", \"ind7\"))  # Data returns in data.frame format. The first 4 columns describe attributes of the SNP  # - rs#: variant name # - alleles: reference allele / alternative allele # - chrom: chromosome name # - pos: position in bp # while the following columns describe the SNP value for a single sample line using  # numerical coding 0, 1, and 2 for reference, heterozygous, alternative/minor alleles. head(marker_matrix)  # get the metadata associated with the samples in the current active run gigwa_set_db(\"3kG_10M\") gigwa_set_project(\"3003_ind\") gigwa_set_run(\"1\")  # get a list of all samples in the selected run metadata <- gigwa_get_metadata()  View(metadata)"},{"path":"/articles/terraclimate_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"TerraClimate Example","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System(s) like BMS, BreedBase, GIGWA (using BrAPI calls) help retrieve phenotypic genotypic data directly analyzing pipelines developed R statistical environment.","code":""},{"path":"/articles/terraclimate_example.html","id":"terraclimate","dir":"Articles","previous_headings":"","what":"TerraClimate","title":"TerraClimate Example","text":"TerraClimate dataset monthly climate climatic water balance global terrestrial surfaces 1958-2019. data provide important inputs ecological hydrological studies global scales require high spatial resolution time-varying data. data monthly temporal resolution ~4-km (1/24th degree) spatial resolution. data cover period 1958-2020. plan update data periodically (annually). ###Reference: Abatzoglou, J., Dobrowski, S., Parks, S. et al. TerraClimate, high-resolution global dataset monthly climate climatic water balance 1958–2015. Sci Data 5, 170191 (2018). https://doi.org/10.1038/sdata.2017.191","code":""},{"path":"/articles/terraclimate_example.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"TerraClimate Example","text":"","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/articles/terraclimate_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"TerraClimate Example","text":"","code":"# load the QBMS library library(QBMS)  # ICARDA Tal-Hadya station, Syria data <- get_terraclimate(36.016, 36.943, '1979-09-01', '2012-06-30')  View(data$climate[[1]])  View(data$biovars[[1]])  # 1. ICARDA Merchouch station, Morocco # 2. ICARDA Terbol station, Lebanon # 3. ICARDA Amlaha station, India  x <- c(-6.716, 35.917, 76.884) y <- c(33.616, 33.833, 23.111)  # ICARDA stations (WorldClim temporal range) worldclim_range <- get_terraclimate(y, x, '1970-01-01', '2000-12-31', c('ppt', 'tmin', 'tmax'))  # ?calc_biovars worldclim_norm  <- apply(worldclim_range$biovars[[2]][,1:19], 2, function(x) round(mean(x), 1))  # biovars       bio1   bio2   bio3   bio4   bio5   bio6   bio7   bio8   bio9  bio10  bio11 # terraclimate  16.2   13.5   41.4   713.5  33.8   1.0    32.8   8.0    24.3  24.5   7.4 # worldclim/10  15.5   13.6   43.0   631.0  33.0   1.6    31.4   7.3    23.2  23.2   7.3 # # NOTE: all worldcim biovars derivative from temperature (i.e., bio1-bio11) have a scale factor of 10  #       except bio3 because it is a ratio. # # biovars(cont) bio12  bio13  bio14  bio15  bio16  bio17  bio18  bio19 # terraclimate  661.0  182.1  0.0    113.5  419.2  0.3    0.9    398.5 # worldclim     592.0  140.0  0.0    99.0   368.0  1.0    2.0    368.0"},{"path":"/articles/tutorial.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"QBMS Tutorial","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System database (using BrAPI calls) help retrieve experiments data directly R statistical analyzing environment. Author Maintainer: Khaled Al-Shamaa <k.el-shamaa () cgiar (dot) org> Contributor: Mariano Omar CRIMI <m.crimi () cgiar (dot) org> Contributor: Zakaria Kehel <z.kehel () cgiar (dot) org> Copyright Holder: International Center Agricultural Research Dry Areas (ICARDA)","code":""},{"path":"/articles/tutorial.html","id":"breeding-management-system","dir":"Articles","previous_headings":"QBMS","what":"Breeding Management System","title":"QBMS Tutorial","text":"Breeding Management System (BMS) information management system developed Integrated Breeding Platform help breeders manage breeding process, programme planning decision-making. BMS customizable crop breeding programs, comes pre-loaded curated ontology terms many crops (bean, cassava, chickpea, cowpea, groundnut, maize, rice, sorghum, soybean, wheat, others). BMS available cloud application, can installed local remote servers accessed multiple users.","code":""},{"path":"/articles/tutorial.html","id":"brapi","dir":"Articles","previous_headings":"QBMS","what":"BrAPI","title":"QBMS Tutorial","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/tutorial.html","id":"install","dir":"Articles","previous_headings":"QBMS","what":"Install","title":"QBMS Tutorial","text":"already active BMS user, can contact IBP support get access trial BMS server.","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/articles/tutorial.html","id":"example","dir":"Articles","previous_headings":"QBMS","what":"Example","title":"QBMS Tutorial","text":"","code":"# load the QBMS library library(QBMS)  # config your BMS connection (by providing your BMS login page URL) set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\")  # login using your BMS account (interactive mode) # or pass your BMS username and password as parameters (batch mode) login_bms()  # list supported crops in the current bms server list_crops()  # select a crop by name set_crop(\"maize\")  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"MC Maize\")  # list all studies/trials in the selected program list_trials()  # filtered by year of starting date list_trials(2020)  # select a specific study/trial by name set_trial(\"2018 PVT\")  # get observation variable ontology in the selected study/trial ontology <- get_trial_obs_ontology()  # list all environments/locations information in the selected study/trial list_studies()  # select a specific environment/location by name set_study(\"2018 PVT Environment Number 1\")  # select a specific study by location name (first match) studies <- list_studies() set_study(studies[studies$locationName == \"BASF Bremen\", \"studyName\"][1])  # retrieve data, general information, and germplasm list of the selected environment/location data <- get_study_data() info <- get_study_info() germplasm <- get_germplasm_list()  # get the pedigree table pedigree_table <- get_pedigree_table(germplasm, \"germplasmName\", \"pedigree\")  # retrieve multi-environment trial data of the selected study/trial MET <- get_trial_data()  # retrieve all environments/locations information in the selected program program_studies <- get_program_studies()  # retrieve observations data of given germplasm aggregated from all trials in the selected program germplasm_observations <- get_germplasm_data(\"BASFCORN-2-1\")"},{"path":"/articles/tutorial.html","id":"troubleshooting-the-installation","dir":"Articles","previous_headings":"QBMS","what":"Troubleshooting the installation","title":"QBMS Tutorial","text":"installation QBMS generates errors saying existing packages removed, can try quit R session, try start R administrator (Windows) SUDO mode (Linux/Ubuntu) try installing . get error related packages built current version R, updating packages doesn’t help, can consider overriding error following code. Note: might help install QBMS may result problems. possible, ’s best resolve errors rather ignoring .","code":"Sys.setenv(\"R_REMOTES_NO_ERRORS_FROM_WARNINGS\" = TRUE)  remotes::install_github(\"icarda-git/QBMS\", upgrade = \"always\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Khaled Al-Shamaa. Author, maintainer. Mariano Omar Crimi. Contributor. Zakaria Kehel. Contributor. Johan Aparicio. Contributor. ICARDA. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Al-Shamaa K (2023). QBMS: Query Breeding Management System(s). R package version 0.9.1, https://icarda-git.github.io/QBMS/.","code":"@Manual{,   title = {QBMS: Query the Breeding Management System(s)},   author = {Khaled Al-Shamaa},   year = {2023},   note = {R package version 0.9.1},   url = {https://icarda-git.github.io/QBMS/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Query the Breeding Management System(s)","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System(s) like BMS, BreedBase, GIGWA (using BrAPI calls) help retrieve phenotypic genotypic data directly analyzing pipelines developed R statistical environment. Author Maintainer: Khaled Al-Shamaa <k.el-shamaa () cgiar (dot) org> Contributor: Mariano Omar CRIMI <m.crimi () cgiar (dot) org> Contributor: Zakaria Kehel <z.kehel () cgiar (dot) org> Contributor: Johan Aparicio <j.aparicio () cgiar (dot) org> Copyright Holder: International Center Agricultural Research Dry Areas (ICARDA)","code":""},{"path":"/index.html","id":"breeding-management-system-bms","dir":"","previous_headings":"","what":"Breeding Management System (BMS)","title":"Query the Breeding Management System(s)","text":"Breeding Management System (BMS) information management system developed Integrated Breeding Platform help breeders manage breeding process, programme planning decision-making. BMS customizable crop breeding programs, comes pre-loaded curated ontology terms many crops (bean, cassava, chickpea, cowpea, groundnut, maize, rice, sorghum, soybean, wheat, others). BMS available cloud application, can installed local remote servers accessed multiple users.","code":""},{"path":"/index.html","id":"breedbase","dir":"","previous_headings":"","what":"BreedBase","title":"Query the Breeding Management System(s)","text":"Breedbase comprehensive breeding management analysis software. can used design field layouts, collect phenotypic information using tablets, support collection genotyping samples field, store large amounts high density genotypic information, provide Genomic Selection related analyses predictions.","code":""},{"path":"/index.html","id":"gigwa","dir":"","previous_headings":"","what":"GIGWA","title":"Query the Breeding Management System(s)","text":"GIGWA web-based tool provides easy intuitive way explore large amounts genotyping data filtering latter based variant features, including functional annotations, also genotype patterns. data storage relies MongoDB, offers good scalability perspectives. GIGWA can handle multiple databases may deployed either single multi-user mode. Finally, provides wide range popular export formats.","code":""},{"path":"/index.html","id":"brapi","dir":"","previous_headings":"","what":"BrAPI","title":"Query the Breeding Management System(s)","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/index.html","id":"terraclimate","dir":"","previous_headings":"","what":"TerraClimate","title":"Query the Breeding Management System(s)","text":"TerraClimate dataset monthly climate climatic water balance global terrestrial surfaces 1958-2019. data provide important inputs ecological hydrological studies global scales require high spatial resolution time-varying data. data monthly temporal resolution ~4-km (1/24th degree) spatial resolution. data cover period 1958-2020. plan update data periodically (annually).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Query the Breeding Management System(s)","text":"","code":"install.packages(\"QBMS\")"},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Query the Breeding Management System(s)","text":"get bug fix use feature development version, can install development version QBMS GitHub.","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Query the Breeding Management System(s)","text":"successfully install QBMS R package, can load library set remote server configuration (e.g., BMS, BreedBase, GIGWA) simply copying pasting login page URL web browser. start querying retrieving data remote server, login using credentials server’s GUI/web interface. Please note can call login function(s) parameters (interactive mode), get popup window insert username password (highly advised one best security practices). Although, automatic analysis pipeline(s) server services, can still provide required username password login function parameters (.e., batch mode). careful sharing batch mode code avoid leaking credential public authorized spaces.","code":"# load the QBMS library library(QBMS)  # config your BMS connection (by providing your BMS login page URL) set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\") # login using your account (interactive mode) login_bms()  # or pass your username and password as parameters (batch mode) login_bms(\"username\", \"password\")"},{"path":"/index.html","id":"boosting-big-queries-performance","dir":"","previous_headings":"","what":"Boosting Big Queries Performance","title":"Query the Breeding Management System(s)","text":"can get benefit external suggested R package (CRAN yet) named async improve performance multi-page API calls optionally enabling asynchronous calls prevent blocking behavior fetching requested pages simultaneously (helps reduce waiting time user). need activate option install async package manually using following line code, QBMS take care rest ;-)","code":"remotes::install_github(\"r-lib/async\")"},{"path":"/index.html","id":"supporting-multiple-provider-connectors","dir":"","previous_headings":"","what":"Supporting Multiple Provider Connectors","title":"Query the Breeding Management System(s)","text":"can switch ongoing QBMS connection another server/database connection using get_qbms_connection() set_qbms_connection() functions, shown following example (.e., need switch forth back session): detailed example available documentation get_qbms_connection() set_qbms_connection() functions. Also, can find elegant solution developed Francisco Agosto-Perez Breeding Informatics team within Innovation Lab Crop Improvement Cornell University available : https://github.com/agostof/BrAPI-Provider/","code":"# configure QBMS to connect the phenotypics server set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\")  # login and retrieve data from the phenotypic server  # save current connection (phenotypic server) con1 <- get_qbms_connection()  # configure QBMS to connect the genotypic server set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\", engine = \"gigwa\", no_auth = TRUE)  # retrieve data from the genotypic server  # save current connection (before switch) con2 <- get_qbms_connection()  # load the saved phenotypic server connection set_qbms_connection(con1)  # continue retrieving data from the phenotypic server"},{"path":"/index.html","id":"error-and-debugging","dir":"","previous_headings":"","what":"Error and Debugging","title":"Query the Breeding Management System(s)","text":"get unexpected results weird behavior want dig deep investigate went wrong, can get copy internal QBMS variables calling debug_qbms() function.","code":"dump <- debug_qbms()  dump$config # $crop # [1] \"maize\" #  # $server # [1] \"https://www.bms-uat-test.net\" #  # $path # [1] \"bmsapi\" #  # $page_size # [1] 1000 #  # $time_out # [1] 120 #  # $base_url # [1] \"https://www.bms-uat-test.net/bmsapi\" #  # $engine # [1] \"bms\"  names(dump$state) # [1] \"token\"         \"program_db_id\" \"trial_db_id\"   \"study_db_id\"   \"user\"          # [6] \"expires_in\"    \"errors\"        ...  dump$state$token # [1] \"username:1666907125029:a312bb036cc8d9cc302bee1f0981e5ab\""},{"path":"/index.html","id":"troubleshooting-the-installation","dir":"","previous_headings":"","what":"Troubleshooting the Installation","title":"Query the Breeding Management System(s)","text":"installation QBMS generates errors saying existing packages removed, can try quit R session, try start R administrator (Windows) SUDO mode (Linux/Ubuntu) try installing . get error related packages built current version R, updating packages doesn’t help, can consider overriding error following code. Note: might help install QBMS may result problems. possible, ’s best resolve errors rather ignoring . get error related list set runs GIGWA (.e., gigwa_list_runs() gigwa_set_run() functions), can try ensure R session system locale using UTF-8 character set encoding. may consider overwriting system locale following command resolve issue: get following error message, make sure install suggested async package fix .","code":"Sys.setenv(\"R_REMOTES_NO_ERRORS_FROM_WARNINGS\" = TRUE)  remotes::install_github(\"icarda-git/QBMS\", upgrade = \"always\") Sys.setlocale(\"LC_ALL\", \"English_United States.utf8\") Error: 'synchronise' is not an exported object from 'namespace:async'"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Query the Breeding Management System(s)","text":"Peter Selby et al., BrAPI-application programming interface plant breeding applications, Bioinformatics, Volume 35, Issue 20, 15 October 2019, Pages 4147–4155, https://doi.org/10.1093/bioinformatics/btz190 Breeding API (2022, December 15). BrAPI Compatible Software list. Retrieved https://brapi.org/compatibleSoftware Excellence Breeding Toolbox (2023, February 1). Query Breeding Management Systems (QBMS) R package. Retrieved https://excellenceinbreeding.org/toolbox/tools/query-breeding-management-systems-qbms-r-package CGSpace (2023, February 23). Query Breeding Management Systems (QBMS) R package. Retrieved https://cgspace.cgiar.org/handle/10568/128828 MELSpace (2023, February 23). Query Breeding Management Systems (QBMS) R package. Retrieved https://repo.mel.cgiar.org/handle/20.500.11766/68139","code":""},{"path":"/reference/brapi_get_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function used for core BrAPI GET calls — brapi_get_call","title":"Internal function used for core BrAPI GET calls — brapi_get_call","text":"function created *internal use * cal BrAPI GET method retrieve rough response data send back results. function take care pagination, authentication, encoding, compress, decode JSON response, etc.","code":""},{"path":"/reference/brapi_get_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function used for core BrAPI GET calls — brapi_get_call","text":"","code":"brapi_get_call(call_url, nested = TRUE)"},{"path":"/reference/brapi_get_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function used for core BrAPI GET calls — brapi_get_call","text":"call_url BrAPI URL call GET method nested FALSE, retrieved JSON data flatten (default TRUE)","code":""},{"path":"/reference/brapi_get_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function used for core BrAPI GET calls — brapi_get_call","text":"result object returned JSON API response","code":""},{"path":"/reference/brapi_get_call.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function used for core BrAPI GET calls — brapi_get_call","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/brapi_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Common HTTP headers to send — brapi_headers","title":"Common HTTP headers to send — brapi_headers","text":"Build list common HTTP headers send API call","code":""},{"path":"/reference/brapi_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common HTTP headers to send — brapi_headers","text":"","code":"brapi_headers()"},{"path":"/reference/brapi_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common HTTP headers to send — brapi_headers","text":"list common HTTP headers send.","code":""},{"path":"/reference/build_pedigree_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Building Pedigree Table Recursively — build_pedigree_table","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"Internal helping function build pedigree table recursively.","code":""},{"path":"/reference/build_pedigree_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"","code":"build_pedigree_table(   geno_list = NULL,   pedigree_list = NULL,   pedigree_df = NULL )"},{"path":"/reference/build_pedigree_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"geno_list List genotypes/germplasms names. pedigree_list List associated pedigree strings. pedigree_df Pedigree data.frame per previous call/iteration.","code":""},{"path":"/reference/build_pedigree_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"data.frame three columns correspond identifiers individual,         female parent male parent, respectively.","code":""},{"path":"/reference/build_pedigree_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/calc_biovars.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Bioclimatic Variables — calc_biovars","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"Bioclimatic variables derived monthly temperature rainfall  values order generate biologically meaningful variables.  often used species distribution modeling related ecological modeling  techniques. bioclimatic variables represent annual trends (e.g., mean  annual temperature, annual precipitation) seasonality (e.g., annual range  temperature precipitation) extreme limiting environmental factors  (e.g., temperature coldest warmest month, precipitation  wet dry quarters). quarter period three months (1/4 year). coded follows: BIO1 = Annual Mean Temperature BIO2 = Mean Diurnal Range (Mean monthly (max temp - min temp)) BIO3 = Isothermality (BIO2/BIO7) (* 100) BIO4 = Temperature Seasonality (standard deviation *100) BIO5 = Max Temperature Warmest Month BIO6 = Min Temperature Coldest Month BIO7 = Temperature Annual Range (BIO5-BIO6) BIO8 = Mean Temperature Wettest Quarter BIO9 = Mean Temperature Driest Quarter BIO10 = Mean Temperature Warmest Quarter BIO11 = Mean Temperature Coldest Quarter BIO12 = Annual Precipitation BIO13 = Precipitation Wettest Month BIO14 = Precipitation Driest Month BIO15 = Precipitation Seasonality (Coefficient Variation) BIO16 = Precipitation Wettest Quarter BIO17 = Precipitation Driest Quarter BIO18 = Precipitation Warmest Quarter BIO19 = Precipitation Coldest Quarter work derivative dismo R package","code":""},{"path":"/reference/calc_biovars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"","code":"calc_biovars(data)"},{"path":"/reference/calc_biovars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"data Data.frame 4 mandatory columns (year, ppt, tmin, tmax),  12 rows (months) year sorted Jan Dec.","code":""},{"path":"/reference/calc_biovars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"Data.frame 19 columns \"bioclim\" variables (bio1-bio19)          last column year (get one row per year).","code":""},{"path":"/reference/calc_biovars.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"Nix, 1986. biogeographic analysis Australian elapid snakes.              : R. Longmore (ed.). Atlas elapid snakes Australia.              Australian Flora Fauna Series 7. Australian Government Publishing              Service, Canberra.","code":""},{"path":"/reference/calc_biovars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org Robert Hijmans, Museum Vertebrate Zoology, UC Berkeley","code":""},{"path":"/reference/debug_qbms.html","id":null,"dir":"Reference","previous_headings":"","what":"Debug internal QBMS status object — debug_qbms","title":"Debug internal QBMS status object — debug_qbms","text":"Return internal QBMS status object debugging","code":""},{"path":"/reference/debug_qbms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debug internal QBMS status object — debug_qbms","text":"","code":"debug_qbms()"},{"path":"/reference/debug_qbms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debug internal QBMS status object — debug_qbms","text":"environment object package config status","code":""},{"path":"/reference/debug_qbms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Debug internal QBMS status object — debug_qbms","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/debug_qbms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Debug internal QBMS status object — debug_qbms","text":"","code":"obj <- debug_qbms() obj$config #> $crop #> NULL #>  obj$state #> $token #> NULL #>"},{"path":"/reference/get_async_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Async version of HTTP GET request — get_async_page","title":"Async version of HTTP GET request — get_async_page","text":"small helper function create `async` version original HTTP GET request.","code":""},{"path":"/reference/get_async_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Async version of HTTP GET request — get_async_page","text":"","code":"get_async_page(full_url, nested)"},{"path":"/reference/get_async_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Async version of HTTP GET request — get_async_page","text":"full_url URL retrieve nested flatten nested data.frames","code":""},{"path":"/reference/get_async_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Async version of HTTP GET request — get_async_page","text":"Async version HTTP GET request.","code":""},{"path":"/reference/get_async_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all supplied pages — get_async_pages","title":"Run all supplied pages — get_async_pages","text":"small helper function create deferred value resolved  listed pages resolved.","code":""},{"path":"/reference/get_async_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all supplied pages — get_async_pages","text":"","code":"get_async_pages(pages, nested)"},{"path":"/reference/get_async_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all supplied pages — get_async_pages","text":"pages List URLs retrieve nested flatten nested data.frames","code":""},{"path":"/reference/get_async_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all supplied pages — get_async_pages","text":"Async deferred object.","code":""},{"path":"/reference/get_crop_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of locations information of the current selected crop — get_crop_locations","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"function retrieve locations information current active crop configured internal state object using `set_crop()` function.","code":""},{"path":"/reference/get_crop_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"","code":"get_crop_locations()"},{"path":"/reference/get_crop_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"data frame locations information","code":""},{"path":[]},{"path":"/reference/get_crop_locations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_germplasm_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","title":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","text":"Get germplasm attributes given germplasm crop","code":""},{"path":"/reference/get_germplasm_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","text":"","code":"get_germplasm_attributes(germplasm_name = \"\")"},{"path":"/reference/get_germplasm_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","text":"germplasm_name name germplasm","code":""},{"path":"/reference/get_germplasm_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","text":"data frame germplasm attributes","code":""},{"path":[]},{"path":"/reference/get_germplasm_attributes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","text":"Johan Steven Aparicio, j.aparicio@cgiar.org","code":""},{"path":"/reference/get_germplasm_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get germplasm attributes for a given germplasm in a crop — get_germplasm_attributes","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # retrive attributes data of a given germplasm in a crop germplasm_attributes <- get_germplasm_attributes(\"BASFCORN-2-1\") }"},{"path":"/reference/get_germplasm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","title":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","text":"function retrieve observations data available given germplasm current crop database regardless programs/trials nested structure.","code":""},{"path":"/reference/get_germplasm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","text":"","code":"get_germplasm_data(germplasm_name = \"\")"},{"path":"/reference/get_germplasm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","text":"germplasm_name name germplasm","code":""},{"path":"/reference/get_germplasm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","text":"data frame germplasm observations data aggregate trials","code":""},{"path":[]},{"path":"/reference/get_germplasm_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_germplasm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the observations data of a given germplasm name in a crop — get_germplasm_data","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # retrive observations data of a given germplasm aggregated from all trials germplasm_observations <- get_germplasm_data(\"BASFCORN-2-1\") }"},{"path":"/reference/get_germplasm_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Germplasm ID — get_germplasm_id","title":"Get Germplasm ID — get_germplasm_id","text":"Get germplasm id given germplasm name current crop","code":""},{"path":"/reference/get_germplasm_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Germplasm ID — get_germplasm_id","text":"","code":"get_germplasm_id(germplasm_name = \"\")"},{"path":"/reference/get_germplasm_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Germplasm ID — get_germplasm_id","text":"germplasm_name name germplasm","code":""},{"path":"/reference/get_germplasm_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Germplasm ID — get_germplasm_id","text":"string germplasm id","code":""},{"path":[]},{"path":"/reference/get_germplasm_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Germplasm ID — get_germplasm_id","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_germplasm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the germplasm list of the current active study — get_germplasm_list","title":"Get the germplasm list of the current active study — get_germplasm_list","text":"function retrieve germplasm list current active study configured internal state object using `set_study()` function.","code":""},{"path":"/reference/get_germplasm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the germplasm list of the current active study — get_germplasm_list","text":"","code":"get_germplasm_list()"},{"path":"/reference/get_germplasm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the germplasm list of the current active study — get_germplasm_list","text":"data frame study germplasm list","code":""},{"path":[]},{"path":"/reference/get_germplasm_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the germplasm list of the current active study — get_germplasm_list","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_germplasm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the germplasm list of the current active study — get_germplasm_list","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # select a specific environment/location dataset set_study(\"2018 PVT Environment Number 1\")  # retrieve the germplasm list of the selected environment/location germplasm <- get_germplasm_list() }"},{"path":"/reference/get_login_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Login pop-up window — get_login_details","title":"Login pop-up window — get_login_details","text":"Build GUI pop-window using Tcl/Tk insert BMS username password","code":""},{"path":"/reference/get_login_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login pop-up window — get_login_details","text":"","code":"get_login_details()"},{"path":"/reference/get_login_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login pop-up window — get_login_details","text":"vector inserted username password","code":""},{"path":"/reference/get_login_details.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login pop-up window — get_login_details","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Direct Parents — get_parents","title":"Get Direct Parents — get_parents","text":"Internal helping function split given pedigree string provides parentage cultivar obtained, get pedigrees direct parents.","code":""},{"path":"/reference/get_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Direct Parents — get_parents","text":"","code":"get_parents(pedigree)"},{"path":"/reference/get_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Direct Parents — get_parents","text":"pedigree String provide parentage cultivar obtained.","code":""},{"path":"/reference/get_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Direct Parents — get_parents","text":"Vector two items, direct female male parents.","code":""},{"path":"/reference/get_parents.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Direct Parents — get_parents","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_pedigree_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Pedigree Table — get_pedigree_table","title":"Get the Pedigree Table — get_pedigree_table","text":"Get pedigree table starting current germplasm list associated pedigree string provides parentage cultivar obtained.","code":""},{"path":"/reference/get_pedigree_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Pedigree Table — get_pedigree_table","text":"","code":"get_pedigree_table(   data,   geno_column = \"germplasmName\",   pedigree_column = \"pedigree\" )"},{"path":"/reference/get_pedigree_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Pedigree Table — get_pedigree_table","text":"data germplasm dataset data.frame. geno_column name column identifies genotype/germplasm names. pedigree_column name column identifies pedigree strings.","code":""},{"path":"/reference/get_pedigree_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Pedigree Table — get_pedigree_table","text":"data.frame three columns correspond identifiers individual,         female parent male parent, respectively. row giving pedigree         individual appears row individual appears parent.         Founders use NA parental columns.","code":""},{"path":"/reference/get_pedigree_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Pedigree Table — get_pedigree_table","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_pedigree_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Pedigree Table — get_pedigree_table","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # select a specific environment/location dataset set_study(\"2018 PVT Environment Number 1\")  # retrieve the germplasm list of the selected environment/location germplasm <- get_germplasm_list()  pedigree_table <- get_pedigree_table(germplasm, \"germplasmName\", \"pedigree\")  ############################# # nadiv package way # library(nadiv)  # get additive relationship matrix in sparse matrix format # A <- nadiv::makeA(pedigree_table)  # get A inverse matrix using base R function # AINV <- solve(as.matrix(A))  ############################# # ASReml-R package way # library(asreml)  # represent A inverse matrix in efficient way using i,j index and Ainverse value # actual genotype names of any given index are in the attr(ainv, \"rowNames\") # ainv <- asreml::ainverse(pedigree_table)  ############################# # dummy data set for testing test <- data.frame(genotype = c(\"X\", \"Y\"),                    pedigree = c(\"A//B/D/2/C\", \"B/C/3/A//B/C/2/D\"))  pedigree_table <- get_pedigree_table(test, \"genotype\", \"pedigree\") }"},{"path":"/reference/get_program_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of trials studies locations information of the current selected program — get_program_studies","title":"Get the list of trials studies locations information of the current selected program — get_program_studies","text":"function retrieve environments/locations information trials studies current active program configured internal state object using `set_program()` function.","code":""},{"path":"/reference/get_program_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of trials studies locations information of the current selected program — get_program_studies","text":"","code":"get_program_studies()"},{"path":"/reference/get_program_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of trials studies locations information of the current selected program — get_program_studies","text":"data frame locations information study program trials","code":""},{"path":[]},{"path":"/reference/get_program_studies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of trials studies locations information of the current selected program — get_program_studies","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_program_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of trials studies locations information of the current selected program — get_program_studies","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # retrive all environments/locations information in the selected program studies/trials program_studies <- get_program_studies() }"},{"path":"/reference/get_program_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function used to retrieve the rough list of trials — get_program_trials","title":"Internal function used to retrieve the rough list of trials — get_program_trials","text":"function created *internal use * retrieve rough list trials pre-selected (.e. currently active) crop breeding program combination already configured internal state object using `set_crop()` `set_program()` functions respectively.","code":""},{"path":"/reference/get_program_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function used to retrieve the rough list of trials — get_program_trials","text":"","code":"get_program_trials()"},{"path":"/reference/get_program_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function used to retrieve the rough list of trials — get_program_trials","text":"list trials information","code":""},{"path":[]},{"path":"/reference/get_program_trials.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function used to retrieve the rough list of trials — get_program_trials","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_qbms_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the QBMS connection — get_qbms_connection","title":"Get the QBMS connection — get_qbms_connection","text":"Get QBMS connection object current environment","code":""},{"path":"/reference/get_qbms_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the QBMS connection — get_qbms_connection","text":"","code":"get_qbms_connection()"},{"path":"/reference/get_qbms_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the QBMS connection — get_qbms_connection","text":"list current connection config status","code":""},{"path":[]},{"path":"/reference/get_qbms_connection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the QBMS connection — get_qbms_connection","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_qbms_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the QBMS connection — get_qbms_connection","text":"","code":"if(interactive()) { # configure QBMS to connect the phenotypics server set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\")  # login, set the crop, and program login_bms() set_crop(\"maize\") set_program(\"MC Maize\")  # get germplasm data df1 <- get_germplasm_data(\"BASFCORN-2-1\")  # save current connection (phenotypic server) con1 <- get_qbms_connection()  # configure QBMS to connect the genotypic server set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\", engine = \"gigwa\", no_auth = TRUE)  # set the db, project, and run gigwa_set_db(\"3kG_10M\") gigwa_set_project(\"3003_ind\") gigwa_set_run(\"1\")  # get associated metadata df2 <- gigwa_get_metadata()  # save current connection (before switch) con2 <- get_qbms_connection()  # load the saved phenotypic server connection set_qbms_connection(con1)  # continue retrieving germplasm attributes from the phenotypic server df3 <- get_germplasm_attributes(\"BASFCORN-2-1\") }"},{"path":"/reference/get_study_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the observations data of the current active study — get_study_data","title":"Get the observations data of the current active study — get_study_data","text":"function retrieve observations data current active study configured internal state object using `set_study()` function.","code":""},{"path":"/reference/get_study_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the observations data of the current active study — get_study_data","text":"","code":"get_study_data()"},{"path":"/reference/get_study_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the observations data of the current active study — get_study_data","text":"data frame study observations data","code":""},{"path":[]},{"path":"/reference/get_study_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the observations data of the current active study — get_study_data","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_study_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the observations data of the current active study — get_study_data","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # select a specific environment/location dataset set_study(\"2018 PVT Environment Number 1\")  # retrieve the data of the selected environment/location data <- get_study_data() }"},{"path":"/reference/get_study_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the details/metadata of the current active study — get_study_info","title":"Get the details/metadata of the current active study — get_study_info","text":"function retrieve details/metadata current active study configured internal state object using `set_study()` function.","code":""},{"path":"/reference/get_study_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the details/metadata of the current active study — get_study_info","text":"","code":"get_study_info()"},{"path":"/reference/get_study_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the details/metadata of the current active study — get_study_info","text":"data frame study details/metadata","code":""},{"path":[]},{"path":"/reference/get_study_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the details/metadata of the current active study — get_study_info","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_study_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the details/metadata of the current active study — get_study_info","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # select a specific environment/location dataset set_study(\"2018 PVT Environment Number 1\")  # retrieve the general information of the selected environment/location info <- get_study_info() }"},{"path":"/reference/get_terraclimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"TerraClimate monthly climate dataset  global terrestrial surfaces 1958-2021. function enables extract  climate variables  hosting server  provided Idaho University given coordinate(s) without  need download whole raster files netCDF format (~100MB per variable year)  provide standard data frame format ready use code. also calculates  bioclimatic variables using calc_biovars  function derivative dismo R package. TerraClimate vs. WorldClim 1958-2021 vs. 1970-2000 14 vs. 7 climate variables ~4 km vs. ~1 km spatial resolution need calculate vs. pre-calculated 19 bioclimatic variables","code":""},{"path":"/reference/get_terraclimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"","code":"get_terraclimate(   lat,   lon,   from = \"1958-01-01\",   to = \"2020-12-31\",   clim_vars = NULL,   month_mask = NULL )"},{"path":"/reference/get_terraclimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"lat Vector Latitude(s) decimal degree format. lon Vector Longitude(s) decimal degree format. Start date string 'YYYY-MM-DD' format. End date string 'YYYY-MM-DD' format. clim_vars List climate variables imported. Valid list includes: aet, def, pet, ppt, q, soil, srad, swe, tmax, tmin, vap, ws, vpd, PDSI. Default NULL . month_mask list months interest (e.g., planting season: c(10:12,1:5)).  Default NULL .","code":""},{"path":"/reference/get_terraclimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"list two data.frame(s) pair coordinates: climate: includes climate variables (reference). biovars: includes calculated bioclimatic variables (reference).","code":""},{"path":"/reference/get_terraclimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"Abatzoglou, J., Dobrowski, S., Parks, S. et al. TerraClimate, high-resolution              global dataset monthly climate climatic water balance 1958-2015.              Sci Data 5, 170191 (2018).              doi:10.1038/sdata.2017.191","code":""},{"path":"/reference/get_terraclimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_terraclimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get TerraClimate data for a given coordinate(s) — get_terraclimate","text":"","code":"if(interactive()) { # data <- get_terraclimate(36.016, 36.943,  #                          '1979-09-01', '2012-06-30',  #                          c('ppt', 'tmin', 'tmax'), c(10:12,1:5)) data <- get_terraclimate(36.016, 36.943, '1979-09-01', '2012-06-30')  View(data$climate[[1]])  View(data$biovars[[1]]) }"},{"path":"/reference/get_trial_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the observations data of the current active trial — get_trial_data","title":"Get the observations data of the current active trial — get_trial_data","text":"function retrieve observations data current active trial (.e. including studies within) configured internal state object using `set_trial()` function.","code":""},{"path":"/reference/get_trial_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the observations data of the current active trial — get_trial_data","text":"","code":"get_trial_data()"},{"path":"/reference/get_trial_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the observations data of the current active trial — get_trial_data","text":"data frame trial observations data","code":""},{"path":[]},{"path":"/reference/get_trial_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the observations data of the current active trial — get_trial_data","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_trial_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the observations data of the current active trial — get_trial_data","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # select a specific environment/location dataset set_study(\"2018 PVT Environment Number 1\")  # retrive multi-environment trial data MET <- get_trial_data() }"},{"path":"/reference/get_trial_obs_ontology.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the traits ontology/metadata of the current active trial — get_trial_obs_ontology","title":"Get the traits ontology/metadata of the current active trial — get_trial_obs_ontology","text":"function retrieve traits ontology/metadata current active trial configured internal state object using `set_trial()` function.","code":""},{"path":"/reference/get_trial_obs_ontology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the traits ontology/metadata of the current active trial — get_trial_obs_ontology","text":"","code":"get_trial_obs_ontology()"},{"path":"/reference/get_trial_obs_ontology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the traits ontology/metadata of the current active trial — get_trial_obs_ontology","text":"data frame traits ontology/metadata","code":""},{"path":[]},{"path":"/reference/get_trial_obs_ontology.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the traits ontology/metadata of the current active trial — get_trial_obs_ontology","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_trial_obs_ontology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the traits ontology/metadata of the current active trial — get_trial_obs_ontology","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # get observation variable ontology ontology <- get_trial_obs_ontology() }"},{"path":"/reference/gigwa_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the metadate of the current active GIGWA run — gigwa_get_metadata","title":"Get the metadate of the current active GIGWA run — gigwa_get_metadata","text":"function retrieve metadata current active run configured internal state object using `gigwa_set_run()` function.","code":""},{"path":"/reference/gigwa_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the metadate of the current active GIGWA run — gigwa_get_metadata","text":"","code":"gigwa_get_metadata()"},{"path":"/reference/gigwa_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the metadate of the current active GIGWA run — gigwa_get_metadata","text":"data.frame metadata associated samples selected run","code":""},{"path":[]},{"path":"/reference/gigwa_get_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the metadate of the current active GIGWA run — gigwa_get_metadata","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the metadate of the current active GIGWA run — gigwa_get_metadata","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"3kG_10M\")  # select a project by name gigwa_set_project(\"3003_ind\")  # select a specific run by name gigwa_set_run(\"1\")  # get a list of all samples in the selected run metadata <- gigwa_get_metadata() }"},{"path":"/reference/gigwa_get_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the samples list of the current active GIGWA run — gigwa_get_samples","title":"Get the samples list of the current active GIGWA run — gigwa_get_samples","text":"function retrieve samples list current active run configured internal state object using `gigwa_set_run()` function.","code":""},{"path":"/reference/gigwa_get_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the samples list of the current active GIGWA run — gigwa_get_samples","text":"","code":"gigwa_get_samples()"},{"path":"/reference/gigwa_get_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the samples list of the current active GIGWA run — gigwa_get_samples","text":"vector samples selected run","code":""},{"path":[]},{"path":"/reference/gigwa_get_samples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the samples list of the current active GIGWA run — gigwa_get_samples","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_get_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the samples list of the current active GIGWA run — gigwa_get_samples","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # select a specific run by name gigwa_set_run(\"run1\")  # get a list of all samples in the selected run samples <- gigwa_get_samples() }"},{"path":"/reference/gigwa_get_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variants in the selected GIGWA run — gigwa_get_variants","title":"Get variants in the selected GIGWA run — gigwa_get_variants","text":"Query variants (e.g., SNPs markers) selected GIGWA run match given criteria.","code":""},{"path":"/reference/gigwa_get_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variants in the selected GIGWA run — gigwa_get_variants","text":"","code":"gigwa_get_variants(max_missing = 1, min_maf = 0, samples = NULL)"},{"path":"/reference/gigwa_get_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variants in the selected GIGWA run — gigwa_get_variants","text":"max_missing maximum missing ratio (sample) 0 1 (default 1 100%). min_maf minimum Minor Allele Frequency (MAF) 0 1 (default 0 0%). samples list samples subset (default NULL retrieve samples).","code":""},{"path":"/reference/gigwa_get_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get variants in the selected GIGWA run — gigwa_get_variants","text":"data.frame first 4 columns describe attributes SNP          (rs#: variant name, alleles: reference allele / alternative allele, chrom: chromosome name,          pos: position bp), following columns describe SNP value          single sample line using numerical coding 0, 1, 2 reference, heterozygous,          alternative/minor alleles.","code":""},{"path":"/reference/gigwa_get_variants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get variants in the selected GIGWA run — gigwa_get_variants","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_get_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get variants in the selected GIGWA run — gigwa_get_variants","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # select a specific run by name gigwa_set_run(\"run1\")  marker_matrix <- gigwa_get_variants(max_missing = 0.2,                                      min_maf = 0.35,                                      samples = c(\"ind1\", \"ind3\", \"ind7\")) }"},{"path":"/reference/gigwa_list_dbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of existing databases in the current GIGWA server — gigwa_list_dbs","title":"Get the list of existing databases in the current GIGWA server — gigwa_list_dbs","text":"Get list existing databases current GIGWA server","code":""},{"path":"/reference/gigwa_list_dbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of existing databases in the current GIGWA server — gigwa_list_dbs","text":"","code":"gigwa_list_dbs()"},{"path":"/reference/gigwa_list_dbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of existing databases in the current GIGWA server — gigwa_list_dbs","text":"list existing databases","code":""},{"path":[]},{"path":"/reference/gigwa_list_dbs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of existing databases in the current GIGWA server — gigwa_list_dbs","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_list_dbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of existing databases in the current GIGWA server — gigwa_list_dbs","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # list existing databases in the GIGWA server gigwa_list_dbs() }"},{"path":"/reference/gigwa_list_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of all projects in the selected GIGWA database — gigwa_list_projects","title":"Get the list of all projects in the selected GIGWA database — gigwa_list_projects","text":"function retrieve projects list current active database configured internal configuration object using `gigwa_set_db()` function.","code":""},{"path":"/reference/gigwa_list_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of all projects in the selected GIGWA database — gigwa_list_projects","text":"","code":"gigwa_list_projects()"},{"path":"/reference/gigwa_list_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of all projects in the selected GIGWA database — gigwa_list_projects","text":"list projects names","code":""},{"path":[]},{"path":"/reference/gigwa_list_projects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of all projects in the selected GIGWA database — gigwa_list_projects","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_list_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of all projects in the selected GIGWA database — gigwa_list_projects","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # list existing projects gigwa_list_projects() }"},{"path":"/reference/gigwa_list_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of run names in the selected GIGWA project — gigwa_list_runs","title":"Get the list of run names in the selected GIGWA project — gigwa_list_runs","text":"function retrieve runs list current active project configured  internal configuration object using `gigwa_set_project()` function.","code":""},{"path":"/reference/gigwa_list_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of run names in the selected GIGWA project — gigwa_list_runs","text":"","code":"gigwa_list_runs()"},{"path":"/reference/gigwa_list_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of run names in the selected GIGWA project — gigwa_list_runs","text":"list runs names","code":""},{"path":[]},{"path":"/reference/gigwa_list_runs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of run names in the selected GIGWA project — gigwa_list_runs","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_list_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of run names in the selected GIGWA project — gigwa_list_runs","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # list all runs in the selected project gigwa_list_runs() }"},{"path":"/reference/gigwa_set_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active GIGWA database by name — gigwa_set_db","title":"Set the current active GIGWA database by name — gigwa_set_db","text":"function update current active database internal configuration object (including brapi connection object).","code":""},{"path":"/reference/gigwa_set_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active GIGWA database by name — gigwa_set_db","text":"","code":"gigwa_set_db(db_name)"},{"path":"/reference/gigwa_set_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active GIGWA database by name — gigwa_set_db","text":"db_name name database","code":""},{"path":"/reference/gigwa_set_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active GIGWA database by name — gigwa_set_db","text":"return value","code":""},{"path":[]},{"path":"/reference/gigwa_set_db.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active GIGWA database by name — gigwa_set_db","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_set_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active GIGWA database by name — gigwa_set_db","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\") }"},{"path":"/reference/gigwa_set_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active GIGWA project — gigwa_set_project","title":"Set the current active GIGWA project — gigwa_set_project","text":"function update current active project internal state object  using programDbId retrieved GIGWA associated given  `project_name` parameter.","code":""},{"path":"/reference/gigwa_set_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active GIGWA project — gigwa_set_project","text":"","code":"gigwa_set_project(project_name)"},{"path":"/reference/gigwa_set_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active GIGWA project — gigwa_set_project","text":"project_name name project","code":""},{"path":"/reference/gigwa_set_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active GIGWA project — gigwa_set_project","text":"return value","code":""},{"path":[]},{"path":"/reference/gigwa_set_project.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active GIGWA project — gigwa_set_project","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_set_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active GIGWA project — gigwa_set_project","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\") }"},{"path":"/reference/gigwa_set_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active GIGWA run — gigwa_set_run","title":"Set the current active GIGWA run — gigwa_set_run","text":"function update current active run internal state object using  `studyDbIds` retrieved GIGWA associated given run_name parameter.","code":""},{"path":"/reference/gigwa_set_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active GIGWA run — gigwa_set_run","text":"","code":"gigwa_set_run(run_name)"},{"path":"/reference/gigwa_set_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active GIGWA run — gigwa_set_run","text":"run_name name run","code":""},{"path":"/reference/gigwa_set_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active GIGWA run — gigwa_set_run","text":"return value","code":""},{"path":[]},{"path":"/reference/gigwa_set_run.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active GIGWA run — gigwa_set_run","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/gigwa_set_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active GIGWA run — gigwa_set_run","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # select a specific run by name gigwa_set_run(\"run1\") }"},{"path":"/reference/list_crops.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of supported crops — list_crops","title":"Get the list of supported crops — list_crops","text":"Get list supported crops","code":""},{"path":"/reference/list_crops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of supported crops — list_crops","text":"","code":"list_crops()"},{"path":"/reference/list_crops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of supported crops — list_crops","text":"list supported crops","code":""},{"path":[]},{"path":"/reference/list_crops.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of supported crops — list_crops","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/list_crops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of supported crops — list_crops","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  # list supported crops in the bms server list_crops() }"},{"path":"/reference/list_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of locations information of the current selected crop — list_locations","title":"Get the list of locations information of the current selected crop — list_locations","text":"function retrieve locations information current active crop configured internal state object using `set_crop()` function.","code":""},{"path":"/reference/list_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of locations information of the current selected crop — list_locations","text":"","code":"list_locations()"},{"path":"/reference/list_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of locations information of the current selected crop — list_locations","text":"data frame locations information","code":""},{"path":[]},{"path":"/reference/list_locations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of locations information of the current selected crop — list_locations","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/list_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of breeding programs names — list_programs","title":"Get the list of breeding programs names — list_programs","text":"function retrieve breeding programs list current active crop configured internal configuration object using `set_crop()` function.","code":""},{"path":"/reference/list_programs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of breeding programs names — list_programs","text":"","code":"list_programs()"},{"path":"/reference/list_programs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of breeding programs names — list_programs","text":"list breeding programs names","code":""},{"path":[]},{"path":"/reference/list_programs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of breeding programs names — list_programs","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/list_programs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of breeding programs names — list_programs","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # list existing breeding programs list_programs() }"},{"path":"/reference/list_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of studies in the current active trial — list_studies","title":"Get the list of studies in the current active trial — list_studies","text":"function retrieve studies list current active trial configured internal state object using `set_trial()` function.","code":""},{"path":"/reference/list_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of studies in the current active trial — list_studies","text":"","code":"list_studies()"},{"path":"/reference/list_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of studies in the current active trial — list_studies","text":"list study location names","code":""},{"path":[]},{"path":"/reference/list_studies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of studies in the current active trial — list_studies","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/list_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of studies in the current active trial — list_studies","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # list all environments/locations information in the selected study/trial list_studies() }"},{"path":"/reference/list_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of trials in the current active breeding program — list_trials","title":"Get the list of trials in the current active breeding program — list_trials","text":"function retrieve trials list current active breeding program configured internal state object using `set_program()` function.","code":""},{"path":"/reference/list_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of trials in the current active breeding program — list_trials","text":"","code":"list_trials(year = NULL)"},{"path":"/reference/list_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the list of trials in the current active breeding program — list_trials","text":"year starting year filter list trials (optional, default NULL)","code":""},{"path":"/reference/list_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of trials in the current active breeding program — list_trials","text":"list trials names","code":""},{"path":[]},{"path":"/reference/list_trials.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of trials in the current active breeding program — list_trials","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/list_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of trials in the current active breeding program — list_trials","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # list all studies/trials in the selected program list_trials()  # filter listed studies/trials by year list_trials(2020) }"},{"path":"/reference/login_bms.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to the server — login_bms","title":"Login to the server — login_bms","text":"Connect server. username password parameters missing, login window pop-insert username password. connection parameters (.e. server IP domain, connection port, API path, connection protocol e.g. http://) retrieve qbms_config list. function update qbms_config list (brapi connection object con key) qbms_state list (token value token key).","code":""},{"path":"/reference/login_bms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to the server — login_bms","text":"","code":"login_bms(username = NULL, password = NULL)"},{"path":"/reference/login_bms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to the server — login_bms","text":"username username (optional, default NULL) password password (optional, default NULL)","code":""},{"path":"/reference/login_bms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to the server — login_bms","text":"return value","code":""},{"path":"/reference/login_bms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to the server — login_bms","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/login_bms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login to the server — login_bms","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms() }"},{"path":"/reference/login_gigwa.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to the GIGWA server — login_gigwa","title":"Login to the GIGWA server — login_gigwa","text":"Connect GIGWA server. username password parameters missing, login window pop-insert username password. connection parameters (.e. server IP domain, connection port, API path, connection protocol e.g. http://) retrieve qbms_config list. function update qbms_config list (brapi connection object con key) qbms_state list (token value token key).","code":""},{"path":"/reference/login_gigwa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to the GIGWA server — login_gigwa","text":"","code":"login_gigwa(username = NULL, password = NULL)"},{"path":"/reference/login_gigwa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to the GIGWA server — login_gigwa","text":"username GIGWA username (optional, default NULL) password GIGWA password (optional, default NULL)","code":""},{"path":"/reference/login_gigwa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to the GIGWA server — login_gigwa","text":"return value","code":""},{"path":"/reference/login_gigwa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to the GIGWA server — login_gigwa","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/login_gigwa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login to the GIGWA server — login_gigwa","text":"","code":"if(interactive()) { # config your GIGWA connection set_qbms_config(\"http://localhost:59395/gigwa/index.jsp\", time_out = 300, engine = \"gigwa\")  # login using your GIGWA account (interactive mode) # you can pass GIGWA username and password as parameters (batch mode) login_gigwa() login_gigwa(\"gigwadmin\", \"nimda\") }"},{"path":"/reference/rbindlistx.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes one data.table from a list of many — rbindlistx","title":"Makes one data.table from a list of many — rbindlistx","text":".call(\"rbind\", x) data.frames, much faster.","code":""},{"path":"/reference/rbindlistx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes one data.table from a list of many — rbindlistx","text":"","code":"rbindlistx(x)"},{"path":"/reference/rbindlistx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes one data.table from a list of many — rbindlistx","text":"x list containing data.table, data.frame list objects.","code":""},{"path":"/reference/rbindlistx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes one data.table from a list of many — rbindlistx","text":"unkeyed data.table containing concatenation items passed .","code":""},{"path":"/reference/rbindx.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data.frames by row, filling in missing columns — rbindx","title":"Combine data.frames by row, filling in missing columns — rbindx","text":"rbinds list data frames filling missing columns NA","code":""},{"path":"/reference/rbindx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data.frames by row, filling in missing columns — rbindx","text":"","code":"rbindx(..., dfs = list(...))"},{"path":"/reference/rbindx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data.frames by row, filling in missing columns — rbindx","text":"... first argument data frame. dfs input data frames row bind together.","code":""},{"path":"/reference/rbindx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data.frames by row, filling in missing columns — rbindx","text":"single data frame","code":""},{"path":"/reference/set_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active crop — set_crop","title":"Set the current active crop — set_crop","text":"function update current active crop internal configuration object (including brapi connection object).","code":""},{"path":"/reference/set_crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active crop — set_crop","text":"","code":"set_crop(crop_name)"},{"path":"/reference/set_crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active crop — set_crop","text":"crop_name name crop","code":""},{"path":"/reference/set_crop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active crop — set_crop","text":"return value","code":""},{"path":[]},{"path":"/reference/set_crop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active crop — set_crop","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/set_crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active crop — set_crop","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\") }"},{"path":"/reference/set_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active breeding program — set_program","title":"Set the current active breeding program — set_program","text":"function update current active breeding program internal state object using programDbId retrieved BMS associated given program_name parameter.","code":""},{"path":"/reference/set_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active breeding program — set_program","text":"","code":"set_program(program_name)"},{"path":"/reference/set_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active breeding program — set_program","text":"program_name name breeding program","code":""},{"path":"/reference/set_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active breeding program — set_program","text":"return value","code":""},{"path":[]},{"path":"/reference/set_program.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active breeding program — set_program","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/set_program.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active breeding program — set_program","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\") }"},{"path":"/reference/set_qbms_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure BMS server settings — set_qbms_config","title":"Configure BMS server settings — set_qbms_config","text":"Set connection configuration BMS server","code":""},{"path":"/reference/set_qbms_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure BMS server settings — set_qbms_config","text":"","code":"set_qbms_config(   url = \"http://localhost/ibpworkbench/controller/auth/login\",   path = NULL,   page_size = 1000,   time_out = 120,   no_auth = FALSE,   engine = \"bms\",   verbose = TRUE )"},{"path":"/reference/set_qbms_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure BMS server settings — set_qbms_config","text":"url URL BMS login page (default \"http://localhost/ibpworkbench/\") path BMS API path (default NULL) page_size Page size (default 1000) time_out Number seconds wait response giving (default 10) no_auth TRUE server require authentication/login (default FALSE) engine Backend database (qbms default, breedbase, gigwa) verbose Logical indicating progress bar display console retrieve data API (TRUE default).","code":""},{"path":"/reference/set_qbms_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure BMS server settings — set_qbms_config","text":"return value","code":""},{"path":"/reference/set_qbms_config.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure BMS server settings — set_qbms_config","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/set_qbms_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure BMS server settings — set_qbms_config","text":"","code":"set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")"},{"path":"/reference/set_qbms_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the QBMS connection — set_qbms_connection","title":"Set the QBMS connection — set_qbms_connection","text":"Set QBMS connection object current environment","code":""},{"path":"/reference/set_qbms_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the QBMS connection — set_qbms_connection","text":"","code":"set_qbms_connection(env)"},{"path":"/reference/set_qbms_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the QBMS connection — set_qbms_connection","text":"env list connection config status load","code":""},{"path":[]},{"path":"/reference/set_qbms_connection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the QBMS connection — set_qbms_connection","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/set_qbms_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the QBMS connection — set_qbms_connection","text":"","code":"if(interactive()) { # configure QBMS to connect the phenotypics server set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\")  # login, set the crop, and program login_bms() set_crop(\"maize\") set_program(\"MC Maize\")  # get germplasm data df1 <- get_germplasm_data(\"BASFCORN-2-1\")  # save current connection (phenotypic server) con1 <- get_qbms_connection()  # configure QBMS to connect the genotypic server set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\", engine = \"gigwa\", no_auth = TRUE)  # set the db, project, and run gigwa_set_db(\"3kG_10M\") gigwa_set_project(\"3003_ind\") gigwa_set_run(\"1\")  # get associated metadata df2 <- gigwa_get_metadata()  # save current connection (before switch) con2 <- get_qbms_connection()  # load the saved phenotypic server connection set_qbms_connection(con1)  # continue retrieving germplasm attributes from the phenotypic server df3 <- get_germplasm_attributes(\"BASFCORN-2-1\") }"},{"path":"/reference/set_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active study by location name — set_study","title":"Set the current active study by location name — set_study","text":"function update current active study internal state object using studyDbId retrieved BMS associated given study_name parameter.","code":""},{"path":"/reference/set_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active study by location name — set_study","text":"","code":"set_study(study_name)"},{"path":"/reference/set_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active study by location name — set_study","text":"study_name name study","code":""},{"path":"/reference/set_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active study by location name — set_study","text":"return value","code":""},{"path":[]},{"path":"/reference/set_study.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active study by location name — set_study","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/set_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active study by location name — set_study","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\")  # select a specific environment/location dataset set_study(\"2018 PVT Environment Number 1\") }"},{"path":"/reference/set_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the current active trial — set_trial","title":"Set the current active trial — set_trial","text":"function update current active trial internal state object using trialDbId retrieved BMS associated given trial_name parameter.","code":""},{"path":"/reference/set_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the current active trial — set_trial","text":"","code":"set_trial(trial_name)"},{"path":"/reference/set_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the current active trial — set_trial","text":"trial_name name trial","code":""},{"path":"/reference/set_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the current active trial — set_trial","text":"return value","code":""},{"path":[]},{"path":"/reference/set_trial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the current active trial — set_trial","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/set_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the current active trial — set_trial","text":"","code":"if(interactive()) { # config your BMS connection set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench\")  # login using your BMS account (interactive mode) # you can pass BMS username and password as parameters (batch mode) login_bms()  set_crop(\"maize\")  # select a breeding program by name set_program(\"MC Maize\")  # select a specific study/trial by name set_trial(\"2018 PVT\") }"},{"path":"/news/index.html","id":"qbms-091-2023-03-28","dir":"Changelog","previous_headings":"","what":"QBMS 0.9.1 2023-03-28","title":"QBMS 0.9.1 2023-03-28","text":"Hot fix reported validation issue gigwa_set_db() function.","code":""},{"path":"/news/index.html","id":"qbms-090-2023-03-20","dir":"Changelog","previous_headings":"","what":"QBMS 0.9.0 2023-03-20","title":"QBMS 0.9.0 2023-03-20","text":"CRAN release: 2023-03-28 Implement caching techniques wherever applicable faster response times improve user experience. Thanks Johan Steven Aparicio initiating . Improve performance multi-page API calls optionally enabling asynchronous calls prevent blocking behavior fetching requested pages simultaneously. Add TerraClimate support query retrieve climate data (including 19 BIOCLIM variables). Add new get_germplasm_attributes() function retrieve germplasm attributes. Thanks Johan Steven Aparicio contribution. Add new gigwa_get_metadata() function retrieve metadata GIGWA database. Add new get_qbms_connection() set_qbms_connection() functions support connecting multiple providers. Thanks Francisco Agosto-Perez suggestions. get_pedigree_table() function can properly detect handle backcross cases. Fix error message calling get_pedigree_table() function case similar genotype names. Thanks Johan Steven Aparicio reporting .","code":""},{"path":"/news/index.html","id":"qbms-080-2022-05-18","dir":"Changelog","previous_headings":"","what":"QBMS 0.8.0 2022-05-18","title":"QBMS 0.8.0 2022-05-18","text":"CRAN release: 2022-05-19 Add GIGWA support (required version 2.4.1 higher) query retrieve SNPs data GWAS GS analysis pipelines. Tiny usability enhancements (e.g., automate path parameter setting, show server name login window, add progress bar get_program_studies function). Fix mistakenly redundant location names/info returned get_program_studies function.","code":""},{"path":"/news/index.html","id":"qbms-070-2022-03-03","dir":"Changelog","previous_headings":"","what":"QBMS 0.7.0 2022-03-03","title":"QBMS 0.7.0 2022-03-03","text":"CRAN release: 2022-03-02 Add BreedBase support using BrAPI v1 calls. Add functionality get pedigree table starting germplasm dataset. Improve set_qbms_config generalize way getting server domain URL. Default timeout become 120 sec instead 10. Set default encoding HTTP content UTF-8.","code":""},{"path":"/news/index.html","id":"qbms-060-2021-10-08","dir":"Changelog","previous_headings":"","what":"QBMS 0.6.0 2021-10-08","title":"QBMS 0.6.0 2021-10-08","text":"Fix filter year functionality list_trials function. Fix get_germplasm_data replaced deprecated germplasm-search call. Minimize package dependencies (rbindx replaced plyr::rbind.fill, rbindlistx replaced data.table::rbindlist, use merge replace dplyr::left_join). Resolve compatibility issues BrAPI changes BMS version 19. Enable set connection time_out set_qbms_config function. Get entry type (test check) get_germplasm_list returned data frame.","code":""},{"path":"/news/index.html","id":"qbms-050-2021-07-08","dir":"Changelog","previous_headings":"","what":"QBMS 0.5.0 2021-07-08","title":"QBMS 0.5.0 2021-07-08","text":"Fix issue empty list get_germplasm_data returned results. Fix retrieving error study data! Enhance returned info get_program_studies function include study settings number test/check entries.","code":""},{"path":"/news/index.html","id":"qbms-041-2020-10-16","dir":"Changelog","previous_headings":"","what":"QBMS 0.4.1 2020-10-16","title":"QBMS 0.4.1 2020-10-16","text":"Simplify configuration required URL BMS login page. Improve performance internal get_program_trials function passing programDbId /trials GET call. Add debug_qbms function get internal config/state object.","code":""},{"path":"/news/index.html","id":"qbms-040-2020-07-03","dir":"Changelog","previous_headings":"","what":"QBMS 0.4.0 2020-07-03","title":"QBMS 0.4.0 2020-07-03","text":"Convert R package. Add set_qbms_config function setup connection configuration variables. Use double colon approach functions external packages. Fix deprecated API call get_trial_obs_ontology function.","code":""},{"path":"/news/index.html","id":"qbms-031-2020-06-09","dir":"Changelog","previous_headings":"","what":"QBMS 0.3.1 2020-06-09","title":"QBMS 0.3.1 2020-06-09","text":"Fix “get_trial_data” function bug one study location. Function “list_studies” returns studyName also, function “set_study” input studyName now. Simplify “get_germplasm_list” function output getting rid nested lists. Deprecate “list_all_studies” function favor “get_program_studies” function.","code":""},{"path":"/news/index.html","id":"qbms-030-2020-06-02","dir":"Changelog","previous_headings":"","what":"QBMS 0.3.0 2020-06-02","title":"QBMS 0.3.0 2020-06-02","text":"Call BrAPI directly (.e. required “CIP-RIU/brapi” GitHub anymore). Add function get data current active trial (combined studies). Add function get list studies given germplasm used. Add function get specific germplasm data program trials. Handle BrAPI pagination proper way.","code":""},{"path":"/news/index.html","id":"qbms-020-2019-08-20","dir":"Changelog","previous_headings":"","what":"QBMS 0.2.0 2019-08-20","title":"QBMS 0.2.0 2019-08-20","text":"Adopt tidyverse style guide https://style.tidyverse.org/ Add functions documentation using roxygen2 format. Add basic error handling functions. Add function retrieve traits ontology trial.","code":""},{"path":"/news/index.html","id":"qbms-010-2019-07-24","dir":"Changelog","previous_headings":"","what":"QBMS 0.1.0 2019-07-24","title":"QBMS 0.1.0 2019-07-24","text":"Initial version.","code":""}]
